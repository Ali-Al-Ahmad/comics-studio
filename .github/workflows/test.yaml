name: deploy to s3

on:
  push:
    branches:
      - staging

jobs:
  Build-Backend-Image:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build Docker image
        working-directory: backend
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/backendimage:latest .

      - name: Start MySQL container
        run: |
          docker run -d \
            --name test-mysql \
            -e MYSQL_ROOT_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e MYSQL_DATABASE=${{ secrets.DB_NAME }} \
            -p 3306:3306 \
            mysql:8.0

      - name: Wait for MySQL to start
        run: |
          echo "Waiting for MySQL..."
          for i in {1..30}; do
            docker ps -a
            docker logs test-mysql || true
            if docker exec test-mysql mysqladmin ping -h127.0.0.1 --silent; then
              echo "MySQL is up!"
              break
            fi
            echo "Waiting..."
            sleep 5
          done

      - name: Show final MySQL logs if still failed
        if: failure()
        run: docker logs test-mysql

      - name: Run tests inside container
        run: |
          docker run --rm \
            --link test-mysql:mysql \
            -e DB_HOST=test-mysql \
            -e DB_PORT=3306 \
            -e DB_USER=root \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e DB_NAME=${{ secrets.DB_NAME }} \
            -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
            -e JWT_EXPIRATION=1d \
            -e NODE_ENV=testing \
            ${{ secrets.DOCKER_USERNAME }}/backendimage:latest \
            npm run test


      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/backendimage:latest

  Build-Frontend-And-Deploy-On-S3:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: Check Node.js version
        run: node -v

      - name: Check npm version
        run: npm -v

      - name: Inject GitHub Secrets into .env.example
        working-directory: ./frontend
        run: sed -i "s|VITE_API_BASE_URL=.*|VITE_API_BASE_URL=http://${{ secrets.EC2_HOST_OLD }}:4000|g" .env.example
                  
      - name: Copy .env.example to .env
        working-directory: ./frontend
        run: cp .env.example .env

      - name: Install dependencies
        working-directory: ./frontend
        run: npm install

      - name: Build React Project
        working-directory: ./frontend
        run: npm run build

      - name: Copy build to EC2
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.EC2_HOST_OLD }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: "frontend/dist"
          target: "/home/${{ secrets.EC2_USER }}/" 

      - name: Deploy to S3
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST_OLD }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            mkdir -p ~/.aws
            echo "[default]" > ~/.aws/config
            echo "region = ${{ secrets.AWS_DEFAULT_REGION }}" >> ~/.aws/config
            aws s3 cp frontend/dist/ s3://fse-final-ali-ah --recursive
            rm -r frontend/

  Copy-docker-compose-To-EC2:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: debugging file
        run: cat docker-compose.yaml

      - name: Inject GitHub Secrets into docker-compose.yaml
        run: |
          sed -i "s|DB_NAME=.*|DB_NAME=${{ secrets.DB_NAME }}|g" docker-compose.yaml
          sed -i "s|DB_USER=.*|DB_USER=${{ secrets.DB_USER }}|g" docker-compose.yaml
          sed -i "s|DB_PASSWORD=.*|DB_PASSWORD=${{ secrets.DB_PASSWORD }}|g" docker-compose.yaml
          sed -i "s|JWT_SECRET=.*|JWT_SECRET=${{ secrets.JWT_SECRET }}|g" docker-compose.yaml
          sed -i "s|OPENAI_API_KEY=.*|OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}|g" docker-compose.yaml
          sed -i "s|REPLICATE_API_TOKEN=.*|REPLICATE_API_TOKEN=${{ secrets.REPLICATE_API_TOKEN }}|g" docker-compose.yaml
          sed -i "s|MYSQL_ROOT_PASSWORD=.*|MYSQL_ROOT_PASSWORD=${{ secrets.DB_PASSWORD }}|g" docker-compose.yaml
          sed -i "s|MYSQL_DATABASE=.*|MYSQL_DATABASE=${{ secrets.DB_NAME }}|g" docker-compose.yaml


      - name: debugging file
        run: cat docker-compose.yaml


      - name: Copy docker-compose to EC2
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.EC2_HOST_OLD }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: 'docker-compose.yaml'
          target: '/home/${{ secrets.EC2_USER }}/'

  Deploy-Node-Docker:
    needs:
      [
        Build-Backend-Image,
        Build-Frontend-And-Deploy-On-S3,
        Copy-docker-compose-To-EC2,
      ]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Deploy on EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST_OLD }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            docker compose down
            docker rmi ${{ secrets.DOCKER_USERNAME }}/backendimage:latest
            docker compose up -d
